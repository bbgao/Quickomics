clustering_distance_cols = input$distanceMethod,
clustering_method = input$agglomerationMethod,
cutree_rows = cutree_rows,
cutree_cols = cutree_cols,
legend = TRUE, legend_breaks = NA,
legend_labels = NA, annotation_row = NA, annotation_col = annotation,
annotation_names_row = TRUE, annotation_names_col = TRUE,
drop_levels = TRUE,
show_rownames = labRow,
show_colnames = labCol,
main = NA,
fontsize = 10,
fontsize_row = cexRow,
fontsize_col = cexCol,
display_numbers = F, number_format = "%.2f", number_color = "grey30",
labels_row = NULL, labels_col = NULL, filename = NA,
silent = FALSE)
p
print(P)
print(p)
grid.draw(p$gtable)
?grid.draw
library(gridExtra)
grid.draw(p$gtable)
suppressPackageStartupMessages({
library(shiny)
library(shinythemes)
library(plotly)
#library(heatmaply)
library(reshape2)
#library(dplyr)
#library(tidyr)
#library(tibble)
#library(stringr)
#library(ggplot2)
library(tidyverse)
library(gplots)
library(ggpubr)
library(gridExtra)
library(ggrepel)
#library(dendextend)
library(DT)
#library(data.table)
library(RColorBrewer)
library(pheatmap)
library(rgl)
#library(car)
library(colourpicker)
library(VennDiagram)
#library(pathview)
library(factoextra)
#library(cluster)
#library(NbClust)
#library(Mfuzz)
library(openxlsx)
#library(rmarkdown)
library(visNetwork)
library(cowplot)
library(ComplexHeatmap)
#library(networkD3)
#library(Hmisc)
})
p
grid.draw(p$gtable)
p
str(p)
pie(1:3)
pie(1:3)
dev.off()
plot(rnorm(50), rnorm(50))
setwd("D:/Test/temp/Mouse_microglia_RNA/")
#load( "heatmapTest.Rdata")  #but not the data from breakpoint
load("D:/Test/temp/Mouse_microglia_RNA/data/Mouse_microglia_RNA-Seq.RData") #network
#work on 2yr_WTvs2mo_WT comparison
filteredGene = results_long %>% filter(test=="2yr_WTvs2mo_WT" & abs(logFC) > log2(4) & Adj.P.Value < 0.01) %>%
dplyr::select(UniqueID) %>% collect %>%	.[["UniqueID"]] %>%as.character()
data.in<-data_wide[filteredGene, ]
annotation_all<-data.frame(sampleid=colnames(data.in)) %>%left_join(MetaData)  #note, I can add more annotation columns later...
#heatmap parameters
annotation<-annotation_all%>%select(group)
rownames(annotation)=colnames(data.in)
input=list("lowColor"="blue", "midColor"="white", highColor="red", "scale"="row", "agglomerationMethod"="complete",
"distanceMethod"="euclidean" )
cutree_rows=2
cutree_cols=2
labRow=T
labCol=T
cexRow=7
cexCol=10
cluster_rows=T
cluster_cols=F
#pheatmap first
p <- pheatmap(data.in,
color = colorpanel (32, low = input$lowColor,mid = input$midColor, high = input$highColor),
kmeans_k = NA, breaks = NA, border_color = "grey60",
cellwidth = NA, cellheight = NA,
scale = input$scale,
cluster_rows = cluster_rows,
cluster_cols = cluster_cols,
clustering_distance_rows = input$distanceMethod,
clustering_distance_cols = input$distanceMethod,
clustering_method = input$agglomerationMethod,
cutree_rows = cutree_rows,
cutree_cols = cutree_cols,
legend = TRUE, legend_breaks = NA,
legend_labels = NA, annotation_row = NA, annotation_col = annotation,
annotation_names_row = TRUE, annotation_names_col = TRUE,
drop_levels = TRUE,
show_rownames = labRow,
show_colnames = labCol,
main = NA,
fontsize = 10,
fontsize_row = cexRow,
fontsize_col = cexCol,
display_numbers = F, number_format = "%.2f", number_color = "grey30",
labels_row = NULL, labels_col = NULL, filename = NA,
sile
ent = FALSE)
p <- pheatmap(data.in,
color = colorpanel (32, low = input$lowColor,mid = input$midColor, high = input$highColor),
kmeans_k = NA, breaks = NA, border_color = "grey60",
cellwidth = NA, cellheight = NA,
scale = input$scale,
cluster_rows = cluster_rows,
cluster_cols = cluster_cols,
clustering_distance_rows = input$distanceMethod,
clustering_distance_cols = input$distanceMethod,
clustering_method = input$agglomerationMethod,
cutree_rows = cutree_rows,
cutree_cols = cutree_cols,
legend = TRUE, legend_breaks = NA,
legend_labels = NA, annotation_row = NA, annotation_col = annotation,
annotation_names_row = TRUE, annotation_names_col = TRUE,
drop_levels = TRUE,
show_rownames = labRow,
show_colnames = labCol,
main = NA,
fontsize = 10,
fontsize_row = cexRow,
fontsize_col = cexCol,
display_numbers = F, number_format = "%.2f", number_color = "grey30",
labels_row = NULL, labels_col = NULL, filename = NA,
silent = FALSE)
?Heatmap
seq(0.1, 4)
seq(-0.1, 4)
?seq
?seq(-2, 0, 3)
seq(-2, 0, 3)
seq(-2, 3, length.out = 32)
max(data.in)
min(data.in)
quantile(data.in, 0.1)
?quantile
quantile(data.in, probs(0.05, 0.5, 0.95))
quantile(data.in, probs=c(0.05, 0.5, 0.95))
quantile(unlist(data.in), probs=c(0.05, 0.5, 0.95))
max(data.in)
quantile(unlist(data.in), probs=c(0.05, 0.5, 0.99))
quantile(unlist(data.in), probs=c(0.01, 0.5, 0.99))
?scale
data_range=quantile(unlist(data.in), probs=c(0.01, 0.5, 0.99))
col_fun=colorRamp2(data_range, c(input$lowColor,input$midColor, input$highColor)
)
data_range
library(circlize)
data_range=quantile(unlist(data.in), probs=c(0.01, 0.5, 0.99))
col_fun=colorRamp2(data_range, c(input$lowColor,input$midColor, input$highColor)
)
col_fub
col_fun
data.in=t(scale(t(data.in))
)
data_range=quantile(unlist(abs(data.in)), probs=c(0.01, 0.5, 0.99))
data_rnage
data_range
data_range[3]
max_s=data_range[3]
col_fun=colorRamp2(c(0-max_s, 0, max_s),  c(input$lowColor,input$midColor, input$highColor) )
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_split=cutree_rows, column_split=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol) )
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol) )
p2
names(data.in)
colnames(data.in)
cluster_cols
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=0, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol) )
p2
if (cluster_cols==F) {cutree_cols=0}
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol) )
p2
data.in<-data_wide[filteredGene, ]
annotation_all<-data.frame(sampleid=colnames(data.in)) %>%left_join(MetaData)  #note, I can add more annotation columns later...
#heatmap parameters
annotation<-annotation_all%>%select(group)
rownames(annotation)=colnames(data.in)
input=list("lowColor"="blue", "midColor"="white", highColor="red", "scale"="none", "agglomerationMethod"="complete",
"distanceMethod"="euclidean" )
cutree_rows=2
cutree_cols=2
labRow=T
labCol=T
cexRow=7
cexCol=10
cluster_rows=T
cluster_cols=F
#pheatmap first
p <- pheatmap(data.in,
color = colorpanel (32, low = input$lowColor,mid = input$midColor, high = input$highColor),
kmeans_k = NA, breaks = NA, border_color = "grey60",
cellwidth = NA, cellheight = NA,
scale = input$scale,
cluster_rows = cluster_rows,
cluster_cols = cluster_cols,
clustering_distance_rows = input$distanceMethod,
clustering_distance_cols = input$distanceMethod,
clustering_method = input$agglomerationMethod,
cutree_rows = cutree_rows,
cutree_cols = cutree_cols,
legend = TRUE, legend_breaks = NA,
legend_labels = NA, annotation_row = NA, annotation_col = annotation,
annotation_names_row = TRUE, annotation_names_col = TRUE,
drop_levels = TRUE,
show_rownames = labRow,
show_colnames = labCol,
main = NA,
fontsize = 10,
fontsize_row = cexRow,
fontsize_col = cexCol,
display_numbers = F, number_format = "%.2f", number_color = "grey30",
labels_row = NULL, labels_col = NULL, filename = NA,
silent = FALSE)
p
#now reproduce in Heatmap
if (input$scale=="none") {
data_range=quantile(unlist(data.in), probs=c(0.01, 0.5, 0.99))
col_fun=colorRamp2(data_range, c(input$lowColor,input$midColor, input$highColor) )
} else {
if (input$scale=="row") {
data.in=t(scale(t(data.in)) ) } else {data.in=scale(data.in) }
data_range=quantile(unlist(abs(data.in)), probs=c(0.01, 0.5, 0.99))
max_s=data_range[3]
col_fun=colorRamp2(c(0-max_s, 0, max_s),  c(input$lowColor,input$midColor, input$highColor) )
}
if (cluster_cols==F) {cutree_cols=0}
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol) )
p2
data.in<-data_wide[filteredGene, ]
annotation_all<-data.frame(sampleid=colnames(data.in)) %>%left_join(MetaData)  #note, I can add more annotation columns later...
#heatmap parameters
annotation<-annotation_all%>%select(group)
rownames(annotation)=colnames(data.in)
input=list("lowColor"="blue", "midColor"="white", highColor="red", "scale"="row", "agglomerationMethod"="complete",
"distanceMethod"="euclidean" )
cutree_rows=2
cutree_cols=2
labRow=T
labCol=T
cexRow=7
cexCol=10
cluster_rows=T
cluster_cols=F
if (input$scale=="none") {
data_range=quantile(unlist(data.in), probs=c(0.01, 0.5, 0.99))
col_fun=colorRamp2(data_range, c(input$lowColor,input$midColor, input$highColor) )
legend_text="Value"
} else {
if (input$scale=="row") {
data.in=t(scale(t(data.in)) ) } else {data.in=scale(data.in) }
data_range=quantile(unlist(abs(data.in)), probs=c(0.01, 0.5, 0.99))
max_s=data_range[3]
col_fun=colorRamp2(c(0-max_s, 0, max_s),  c(input$lowColor,input$midColor, input$highColor) )
legend_text=str_c("Value scaled by", input$scale)
}
if (cluster_cols==F) {cutree_cols=0}
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol), heatmap_legend_param = list(title = legend_text, color_bar = "continuous") )
p2
legend_text=str_c("Value\nscaled by ", input$scale)
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol), heatmap_legend_param = list(title = legend_text, color_bar = "continuous") )
p2
legend_text=str_c("Scaled Value")
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol), heatmap_legend_param = list(title = legend_text, color_bar = "continuous") )
p2
setwd("D:/Test/temp/Reproduce_BZ")
library(extrafont)
install.packages(extrafont)
install.packages("extrafont")
library(extrafont)
#font_import() # only one time required when first time use the      library       extrafont
#y
fonts()
loadfonts()
library(ComplexHeatmap)
library(circlize)
library(RColorBrewer)
library(svglite)
rawdata<- read.table("Fig5_tpm.txt", header=TRUE, row.names=1, quote = "", sep="\t", check.names=FALSE)
rawdata <- rawdata[, !names(rawdata) %in% c("2yr-WT-2F")]
head(rawdata)
dim(rawdata)
corner(rawdata)
ccl <- rawdata$Color != "black"
ccl_color <- as.character(rawdata[rawdata$Color != "black",]$Color)
unique(ccl_color)
data <- as.matrix(rawdata[, c(3:dim(rawdata)[2])])
head(data)
View(rawdata)
View(data)
dim(data)
dim(rawdata)
#convert value in log scale
heatdata <- log2(data+0.01)
rm <- rowMeans(heatdata)
sx <- apply(heatdata, 1, sd)
zz <- sweep(heatdata,1,rm)
zz <- sweep(zz, 1, sx, "/")
zzz <- t(scale(t(heatdata)))
all.equal(zz, zzz, check.attributes = FALSE)
smp <- read.table("Fig5_sample.anno.txt", header=TRUE, row.names=NULL, quote = "", sep="\t", check.names=FALSE)
smp <- smp[ !smp$Sample_ID %in% c("2yr-WT-2F"),]
smp1 = smp[match(colnames(zzz),smp$Sample_ID),]
smp2 = smp1[,c("Genotype","Age")]
View(smp)
View(smp1)
View(smp)
View(smp1)
View(smp2)
p_colors = structure(unique(as.character(rawdata$Color)), names=unique(as.character(rawdata$Pathways)))
p_colors = p_colors[-which(names(p_colors)=="")]
ha = HeatmapAnnotation(df=smp2, col = list(Genotype = c("WT" =  "#619CFF", "Het" = "#F8766D", "KO" = "#00BA38"), Age=c("2m"="lightgray","1y"="orange", "2y"="tan4")),annotation_legend_param = list(title_gp = gpar(fontface="plain",fontsize = 8), labels_gp = gpar(fontface="bold",fontsize = 6)))
ha
plot(ha)
print(ha)
draw(ha)
draw(ha)
long_cn = do.call("paste0", rep(list(gsub("NOTHING","",colnames(data))), 1))
ha_rot_cn = HeatmapAnnotation(text = anno_text(long_cn, rot =90, gp = gpar(fontface="plain",fontsize =4),  just = "right")) #change value to change the angle and position of text
ha_rot_cn
draw(ha_rot_cn)
row_label_col = as.character(rawdata$Color)
nameZoom = rowAnnotation(link = anno_mark(at = which(ccl), labels = rownames(rawdata)[ccl], labels_gp = gpar(fontface = "bold",col = ccl_color,fontsize = 8), padding = 0.2))
View(nameZoom)
draw(nameZoom)
sum(ccl)
smp_clu <- read.table("Fig5_cluster.txt", header=TRUE, row.names=NULL, quote = "", sep="\t", check.names=FALSE)
ht_list=Heatmap(zzz, col = colorRamp2(c(min(zzz, na.rm=T), mean(zzz, na.rm=T), max(zzz, na.rm=T)), c("#377EB8", "white", "#E41A1C")),
name = "log2(TPM)\nZ-score", # legend title
column_order = match(smp_clu$Sample_ID, colnames(zzz)),
heatmap_legend_param = list(title_gp = gpar(fontface = "plain",fontsize = 9), title_position="topleft",labels_gp = gpar(fontface = "plain",fontsize = 8)),
cluster_rows=TRUE, row_title=NULL, row_title_side="left", row_title_gp=gpar(fontsize=10, fontface="bold"), row_title_rot=90, show_row_names=TRUE, row_names_side="left", show_row_dend=FALSE, row_dend_side = "left",  #should the row cluster be put on the left or right of the heatmap?
row_names_gp = gpar(fontsize = 2, col = row_label_col),  #change row label color
clustering_distance_rows = "euclidean",
clustering_method_rows = "complete",
row_dend_width=unit(30,"mm"),
# TRUE first to get Fig5_cluster.txt, then optimize location of sub-clusters
cluster_columns=FALSE, column_title=NULL, column_title_side="top", column_title_gp=gpar(fontsize=10, fontface="bold"),
show_column_names=FALSE, column_names_gp=gpar(fontsize=10), show_column_dend=TRUE,
clustering_distance_columns=function(x) as.dist(1-cor(t(x))),
clustering_method_columns="ward.D2",
column_dend_height=unit(30,"mm"),
#Annotations
top_annotation=ha,
right_annotation = nameZoom,
#top_annotation_height=unit(2,"cm"),
bottom_annotation=ha_rot_cn)+
Heatmap(rawdata$Pathways, name = "Pathways", column_names_gp=gpar(fontsize=6), show_column_names= FALSE, width = unit(0, "mm"), col = p_colors,
heatmap_legend_param = list(title_gp = gpar(fontface = "plain",fontsize = 9), title_position="topleft",labels_gp = gpar(fontface = "plain",fontsize = 8)))
ht_list
draw(ht_list, merge_legend = TRUE)
draw(p2, merge_legend=T)
runApp('D:/Test/temp/Mouse_microglia_RNA')
runApp('D:/Test/temp/Mouse_microglia_RNA')
dev.off()
o
draw(p, merge_legend=T)
p
Heatmap(data.in)
Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_km=cutree_rows, column_km=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol), heatmap_legend_param = list(title = legend_text, color_bar = "continuous") )
cutree_cols
input$cutreecols
cutree_rows
cutree_cols
p
?cutree
p2
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_split=cutree_rows, column_split=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol), heatmap_legend_param = list(title = legend_text, color_bar = "continuous") )
if (cluster_cols==F) {cutree_cols=0}
p2<-Heatmap(data.in, col=col_fun, cluster_rows = cluster_rows, cluster_columns = cluster_cols,
clustering_distance_rows=input$distanceMethod, clustering_distance_columns=input$distanceMethod,
clustering_method_rows=input$agglomerationMethod, clustering_method_columns=input$agglomerationMethod,
row_split=cutree_rows, column_split=cutree_cols, show_row_names = labRow, show_column_names = labCol,
top_annotation = HeatmapAnnotation(df = annotation),	row_names_gp = gpar(fontsize = cexRow),
column_names_gp = gpar(fontsize = cexCol), heatmap_legend_param = list(title = legend_text, color_bar = "continuous") )
cutree_cols
?radioButtons
?selectInput
runApp('D:/Test/temp/Mouse_microglia_RNA')
runApp('D:/Test/temp/Mouse_microglia_RNA')
input$heatmap_annot
head(annotaion_all)
runApp('D:/Test/temp/Mouse_microglia_RNA')
head(df_annot)
head(annotation)
sel_col
input$heatmap_annot
sel_col=match(input$heatmap_annot %in% names(annotation))
sel_col
match(input$heatmap_annot %in% names(annotation))
names(annotation)
match(input$heatmap_annot, names(annotation))
runApp('D:/Test/temp/Mouse_microglia_RNA')
runApp('D:/Test/temp/Mouse_microglia_RNA')
runApp('D:/Test/temp/Mouse_microglia_RNA')
dev.off()
runApp('D:/Test/temp/Mouse_microglia_RNA')
runApp('D:/Test/temp/geneset_test')
runApp('D:/Test/temp/geneset_test')
43699*.078
20000*.078
pca <- 	prcomp(t(data_wide),rank. = 10, scale = FALSE)
View(pca)
percentVar <- 	round((pca$sdev)^2/sum(pca$sdev^2), 3) * 100
scores <- as.data.frame(pca$x)
View(scores)
percentVar
plotdata<-data.frame(PC=names(cores), percentVar)
plotdata<-data.frame(PC=names(scores), percentVar)
plotdata<-data.frame(PC=names(scores), perVar=percentVar[1:ncol(scores))
plotdata<-data.frame(PC=names(scores), perVar=percentVar[1:ncol(scores)])
ggplot(plotdata, aes(x=PC, y=perVa))+geom_bar()
ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar()
ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="ident")
?draw
ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity")
theme_cowplot
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity")+lab(x="Principle Components", y="Percentage of Vriance")+theme_cowplot()
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity")+labs(x="Principle Components", y="Percentage of Vriance")+theme_cowplot()
p
plotdata$PC=factor(plotdata$PC, levels=plotdata$PC)
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity")+labs(x="Principle Components", y="Percentage of Vriance")+theme_cowplot()
p
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity")+labs(x="Principle Components", y="Percentage of Variance")+theme_cowplot()
p
runApp('D:/Test/temp/Mouse_microglia_RNA')
head(plotdata)
View(plotdata)
dev.off()
p
p
dev.off()
p
runApp('D:/Test/temp/geneset_test')
plotdata
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity")+labs(x="Principle Components", y="Percentage of Variance")+theme_cowplot()
p
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity", fill="blue3")+labs(x="Principle Components", y="Percentage of Variance")+theme_cowplot()
p
p<-ggplot(plotdata, aes(x=PC, y=perVar))+geom_bar(stat="identity", fill="blue4")+labs(x="Principle Components", y="Percentage of Variance")+theme_cowplot()
p
setwd("D:/Test/temp/Mouse_microglia_RNA/")
saved_projects
runApp()
runApp()
